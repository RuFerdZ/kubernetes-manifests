## Some basic exercise for Helm
https://github.com/techpodium/local-k3s/tree/master/sample-helm-charts

## Generate K8s manifest using helm charts:
`helm template -g --output-dir ./ymls . -f stage/values.yaml -f stage/secrets.yaml`

wordpress-stack comes from Charts.yaml file
-f - the location of the values.yaml file
-g - generate K8s manifest files


## Managing Secrets in Helm Charts
- Install helm secret plugin
```
helm plugin install https://github.com/jkroepke/helm-secrets --version v4.5.1
```

- If you want to install lates version:
```
helm plugin install https://github.com/jkroepke/helm-secrets


## Installing the deployment
```
helm install wordpress-db -n wpdb . -f dev/values.yaml -f dev/secrets.yaml --create-namespace

Change directory to wp
helm install wordpress-app -n wpapp . -f dev/values.yaml -f dev/secrets.yaml --create-namespace

## Upgrading the deployment
helm upgrade wordpress-app -n wpapp . -f dev/values.yaml -f dev/secrets.yaml

## this will list all the helm deployments in all namespaces
helm ls -A

## delete the deployment
helm unisntall wordpress-db -n wpdb

## Decrypting the secrets file
sops -d dev/secrets.enc.yaml > dev/secrets.yaml

## List the deployments in a namespace
helm ls -n wpdb

## Encrypting the secrets file
- note: set the correct area to encrypt within the file
 sops -e dev/secrets.yaml > dev/secrets.enc.yaml


## running with encryptes secrets
helm secrets install wordpress-db -n wpdb . -f dev/values.yaml -f dev/secrets.enc.yaml --create-namespace

helm secrets install wordpress-app -n wpapp . -f dev/values.yaml -f dev/secrets.enc.yaml --create-namespace

to set if env variable is not set:
    1 - login to the pod (kubectl exec -it podname -n namespace -- /bin/bash)
    2 - echo $WORDPRESS_DB_PASSWORD


Add decrypted file to gitignore


------------------------------------------------------
## Using Helmfile
Step 1: Modify Your SecretProviderClass
The SecretProviderClass will remain the same, but youâ€™ll ensure it creates a Kubernetes Secret automatically. Add the following annotation:

For wpapp Namespace:
yaml
Copy code
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: gcp-secrets-wpapp
  namespace: wpapp
annotations:
  secrets-store.csi.k8s.io/secret-name: frontend-db-secret
  secrets-store.csi.k8s.io/secret-rotation-enabled: "true"
spec:
  provider: gcp
  parameters:
    secrets: |
      - resourceName: "projects/my-project/secrets/MY_DB_PASSWORD"
        version: "latest"
For wpdb Namespace:
yaml
Copy code
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: gcp-secrets-wpdb
  namespace: wpdb
annotations:
  secrets-store.csi.k8s.io/secret-name: database-db-secret
  secrets-store.csi.k8s.io/secret-rotation-enabled: "true"
spec:
  provider: gcp
  parameters:
    secrets: |
      - resourceName: "projects/my-project/secrets/MY_DB_PASSWORD"
        version: "latest"
The annotation secrets-store.csi.k8s.io/secret-name tells the CSI driver to create a Kubernetes Secret with the specified name.
secrets-store.csi.k8s.io/secret-rotation-enabled: "true" enables automatic rotation.
Step 2: Define a Separate secrets.yaml
In each namespace, define a Secret manifest. The CSI driver will populate this secret automatically.

For wpapp Namespace:
yaml
Copy code
apiVersion: v1
kind: Secret
metadata:
  name: frontend-db-secret
  namespace: wpapp
type: Opaque
data: {}
For wpdb Namespace:
yaml
Copy code
apiVersion: v1
kind: Secret
metadata:
  name: database-db-secret
  namespace: wpdb
type: Opaque
data: {}
These secrets are placeholders, and the CSI driver will populate the data field with the content from GSM.

Step 3: Reference the Secret in Your Deployment
Update your deployment to reference the Secret rather than embedding secret details directly.

Frontend Deployment (wpapp namespace):
yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: wpapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
        - name: frontend
          image: my-frontend-image
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: frontend-db-secret
                  key: MYSQL_PASSWORD
Database Deployment (wpdb namespace):
yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: wpdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: database
          image: my-database-image
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-db-secret
                  key: MYSQL_PASSWORD